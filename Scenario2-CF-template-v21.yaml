  AWSTemplateFormatVersion: "2010-09-09"

  Description: "TE-Feb22-Scenario2"

  Resources:

    VPC:
      Type: 'AWS::EC2::VPC'
      Properties:
        EnableDnsSupport: 'true'
        EnableDnsHostnames: 'true'
        CidrBlock: 10.0.0.0/16
    PublicSubnet1:
      Type: 'AWS::EC2::Subnet'
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.0.0.0/24
        AvailabilityZone: "us-east-1a"
    PublicSubnet2:
      Type: 'AWS::EC2::Subnet'
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.0.1.0/24
        AvailabilityZone: "us-east-1b"

    InternetGateway:
      Type: 'AWS::EC2::InternetGateway'
      Properties: {}
    VPCGatewayAttachment:
      Type: 'AWS::EC2::VPCGatewayAttachment'
      Properties:
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref VPC
    PublicRouteTable:
      Type: 'AWS::EC2::RouteTable'
      Properties:
        VpcId: !Ref VPC
    PublicRoute:
      Type: 'AWS::EC2::Route'
      Properties:
        DestinationCidrBlock: 0.0.0.0/0
        RouteTableId: !Ref PublicRouteTable
        GatewayId: !Ref InternetGateway
      DependsOn:
        - VPCGatewayAttachment
    PublicSubnetRouteTableAssociation:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref PublicSubnet1
        RouteTableId: !Ref PublicRouteTable
    PublicSubnetRouteTableAssociation:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref PublicSubnet2
        RouteTableId: !Ref PublicRouteTable

    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
         AccessControl: PublicRead
         WebsiteConfiguration:
           IndexDocument: index.html
           ErrorDocument: error.html
         Tags:
          - Key: "Name"
            Value: "TE Scenario 2"
    BucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: 2012-10-17
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3Bucket
                  - /*
        Bucket: !Ref S3Bucket



    Pipeline:
      Type: 'AWS::CodePipeline::Pipeline'
      Properties:
        ArtifactStore:
          Location: !Ref S3Bucket
          Type: S3
        Name: Scenario2Pipeline
        RoleArn: arn:aws:iam::877181930284:role/service-role/AWSCodePipelineServiceRole-us-east-1-jmk-website-s3-deploy3Test
        Stages:
          -
            Name: Source
            Actions:
              -
                Name: SourceAction
                ActionTypeId:
                  Category: Source
                  Owner: AWS
                  Version: 1
                  Provider: CodeStarSourceConnection
                Configuration:
                  ConnectionArn: "arn:aws:codestar-connections:us-east-1:877181930284:connection/7703c2e7-f8f7-41d0-9071-0fff79eac6f5"
                  FullRepositoryId: "jmkuras/TECE-Team-4"
                  BranchName: "main"

            Name: Deploy
            Actions:
              -
                Name: DeployAction
                InputArtifacts:
                  -
                    Name: SourceOutput
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Version: 1
                  Provider: CodeDeploy
                Configuration:
                  ApplicationName:
                    !Ref CodeDeployApplication
                  DeploymentGroupName:
                    !Ref CodeDeploymentGroup
                RunOrder: 1

    CodeDeployApplication:
      Type: 'AWS::CodeDeploy::Application'
      Properties:
        ApplicationName: Scenario2DeployEC2Website
        ComputePlatform: Server
        Tags:
          - Key: 'webserver'
            Value: 'production2'

    CodeDeploymentGroup:
      Type: 'AWS::CodeDeploy::DeploymentGroup'
      Properties:
        ApplicationName: !Ref CodeDeployApplication
        AutoScalingGroups:
          - !Ref ASG
        DeploymentConfigName: CodeDeployDefault.AllAtOnce
        DeploymentGroupName: Scenario2DeployEC2Website
        LoadBalancerInfo:
          - !Ref ELB
        ServiceRoleArn: arn:aws:iam::877181930284:role/AWSCodeDeploy

    EC2cdIAMRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: [ec2.amazonaws.com]
              Action: ['sts:AssumeRole']
        Path: /
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

    EC2cdInstanceProfile:
      Type: 'AWS::IAM::InstanceProfile'
      Properties:
        Path: /
        Roles: [!Ref EC2cdIAMRole]

    Instance:
      Type: 'AWS::EC2::Instance'
      Properties:
        LaunchTemplate:
          LaunchTemplateId: !Ref RequiredTagsLaunchTemplate
          Version: 1
        InstanceType: t2.micro

    RequiredTagsLaunchTemplate:
      Type: 'AWS::EC2::LaunchTemplate'
      Properties:
        LaunchTemplateData:
          IamInstanceProfile: 
            Name: !Ref EC2cdInstanceProfile
          ImageId: ami-08e4e35cccc6189f4
          InstanceType: t2.micro
          KeyName: lb-keypair
          SecurityGroupIds:
            - sg-071a724f6eeaadb48
          TagSpecifications:
            - ResourceType: instance
              Tags:
                - Key: 'webserver'
                  Value: 'production2'
          UserData: !Base64 
            'Fn::Join':
              - ''
              - - |
                  #!/bin/bash -xe
                - |
                  yum update -y
                - |
                  amazon-linux-extras install epel -y
                - |
                  yum install -y aws-cfn-bootstrap
                - |
                  # Install the files and packages from the metadata
                - '/opt/aws/bin/cfn-init -v '
                - '         --stack '
                - !Ref 'AWS::StackName'
                - '         --resource WebServerInstance '
                - '         --configsets All '
                - '         --region '
                - !Ref 'AWS::Region'
                - |+

                - |
                  # Signal the status from cfn-init
                - '/opt/aws/bin/cfn-signal -e $? '
                - '         --stack '
                - !Ref 'AWS::StackName'
                - '         --resource WebServerInstance '
                - '         --region '
                - !Ref 'AWS::Region'
                - |+

                - >
                  curl https://rpm.gremlin.com/gremlin.repo -o
                  /etc/yum.repos.d/gremlin.repo
                - |
                  sudo yum install -y gremlin gremlind
                - |
                  cd /home/ec2-user
                - >
                  wget
                  https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install
                - |
                  sudo chmod +x ./install
                - |
                  sudo ./install auto
                - |
                  sudo service codedeploy-agent start
                - |
                  gremlin init
                - ''

    ELBSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        VpcId: !Ref VPC
        GroupDescription: Allow access to ELB from HTTP
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0

    ELB:
      Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
      Properties:
        IpAddressType: ipv4
        Name: WebServerALB
        Scheme: internet-facing
        SecurityGroups:
          - !Ref ELBSecurityGroup
        Subnets:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
        Tags:
          - Key: 'webserver'
            Value: 'production2'
        Type: application

    ALBTargetGroup:
      Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
      Properties:
        HealthCheckIntervalSeconds: 30
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 3
        Port: 80
        Protocol: HTTP
        UnhealthyThresholdCount: 5
        VpcId: !Ref VPC

    ALBListener:
      Type: 'AWS::ElasticLoadBalancingV2::Listener'
      Properties:
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref ALBTargetGroup
        LoadBalancerArn: !Ref ELB
        Port: '80'
        Protocol: HTTP

    ASG:
      Type: 'AWS::AutoScaling::AutoScalingGroup'
      Properties:
        AutoScalingGroupName: ALB-ASG3
        Cooldown: 300
        DesiredCapacity: 1
        HealthCheckGracePeriod: 300
        HealthCheckType: EC2
        LaunchTemplate:
          LaunchTemplateId: !Ref RequiredTagsLaunchTemplate
        MaxSize: 5
        MinSize: 1
        ServiceLinkedRoleARN: arn:aws:iam::877181930284:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling
        TargetGroupARN: !Ref ALBTargetGroup
        VPCZoneIdentifier:
          - subnet-039ee77b4f125d49e
          - subnet-0b2376d6bbbe267c1
    ASGPolicy:
       Type: 'AWS::AutoScaling::ScalingPolicy'
       Properties:
         AutoScalingGroupName: !Ref ASG
         PolicyType: TargetTrackingScaling
         TargetTrackingConfiguration:
           PredefinedMetricSpecification:
             PredefinedMetricType: ASGAverageCPUUtilization
             TargetValue: 40